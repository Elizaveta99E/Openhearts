const fs = require('fs');
const path = require('path');

const filePath = path.resolve(__dirname, 'adminside/src/pages/volunteers/list.ts');

// 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
if (!fs.existsSync(filePath)) {
  console.error('‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω:', filePath);
  process.exit(1);
}

// 2. –ü—Ä–æ—Å—Ç–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è UUID –±–µ–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫
function generateUUID() {
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
    const r = Math.random() * 16 | 0;
    const v = c === 'x' ? r : (r & 0x3 | 0x8);
    return v.toString(16);
  });
}

// 3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤
function generateVolunteers() {
  const cities = ['–ú–æ—Å–∫–≤–∞', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥'];
  const names = [
    '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤', '–ê–ª–µ–∫—Å–µ–π –ü–µ—Ç—Ä–æ–≤', '–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞', 
    '–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –°–º–∏—Ä–Ω–æ–≤–∞', '–î–º–∏—Ç—Ä–∏–π –ö—É–∑–Ω–µ—Ü–æ–≤'
  ];
  
  const volunteers = [];
  let currentDate = new Date(2014, 0, 1);
  const endDate = new Date(2025, 3, 6); // 6 –∞–ø—Ä–µ–ª—è 2025

  while (currentDate <= endDate) {
    const randomName = names[Math.floor(Math.random() * names.length)];
    const [firstName, lastName] = randomName.split(' ');
    
    volunteers.push({
      id: generateUUID(),
      mail: `${lastName.toLowerCase()}.${firstName.toLowerCase()}@example.com`,
      name: randomName,
      phone: `+7 (9${Math.floor(Math.random() * 90 + 10)}) ${Math.floor(Math.random() * 900 + 100)}-${Math.floor(Math.random() * 90 + 10)}-${Math.floor(Math.random() * 90 + 10)}`,
      regdate: currentDate.toISOString().split('T')[0],
      birtgday: new Date(
        currentDate.getFullYear() - (20 + Math.floor(Math.random() * 30)), 
        Math.floor(Math.random() * 12),
        Math.floor(Math.random() * 28) + 1
      ).toISOString().split('T')[0],
      city: cities[Math.floor(Math.random() * cities.length)],
      comment: ['–ê–∫—Ç–∏–≤–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫', '–ù–æ–≤–∏—á–æ–∫', '–û–ø—ã—Ç–Ω—ã–π –≤–æ–ª–æ–Ω—Ç–µ—Ä'][Math.floor(Math.random() * 3)],
      status: Math.random() > 0.2 ? '–∞–∫—Ç–∏–≤–µ–Ω' : '–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω',
      photo: `/assets/volunteers/user${Math.floor(Math.random() * 10)}.jpg`
    });

    currentDate.setMonth(currentDate.getMonth() + 1);
  }

  return volunteers;
}

// 4. –ß—Ç–µ–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
fs.readFile(filePath, 'utf8', (err, data) => {
  if (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', err);
    return;
  }

  try {
    console.log('üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤...');
    const newVolunteers = generateVolunteers();
    console.log(`üìä –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ${newVolunteers.length} –∑–∞–ø–∏—Å–µ–π`);

    let updatedContent;
    const volunteersExportRegex = /export\s+const\s+volunteers\s*=\s*\[[^\]]*\]/;

    if (volunteersExportRegex.test(data)) {
      console.log('üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –º–∞—Å—Å–∏–≤–∞ volunteers');
      updatedContent = data.replace(
        volunteersExportRegex,
        `export const volunteers = ${JSON.stringify(newVolunteers, null, 2)}`
      );
    } else {
      console.log('‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ volunteers');
      updatedContent = data + `\n\nexport const volunteers = ${JSON.stringify(newVolunteers, null, 2)};\n`;
    }

    fs.writeFile(filePath, updatedContent, 'utf8', (err) => {
      if (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞:', err);
        return;
      }
      console.log('‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!');
      console.log('üìç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:', filePath);
    });

  } catch (error) {
    console.error('üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
});


// const fs = require('fs');
// const path = require('path');

// const COURSES = [
//     "–î–µ—Ç–∏ –∏ –º–æ–ª–æ–¥–µ–∂—å",
//     "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ",
//     "–ü–æ–∏—Å–∫ –ø—Ä–æ–ø–∞–≤—à–∏—Ö",
//     "–°–í–û",
//     "–£—Ä–±–∞–Ω–∏—Å—Ç–∏–∫–∞",
//     "–°—Ä–æ—á–Ω–∞—è –ø–æ–º–æ—â—å (–ß–°)",
//     "–≠–∫–æ–ª–æ–≥–∏—è",
//     "–ñ–∏–≤–æ—Ç–Ω—ã–µ",
//     "–í–µ—Ç–µ—Ä–∞–Ω—ã –∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è –ø–∞–º—è—Ç—å",
//     "–°–ø–æ—Ä—Ç –∏ —Å–æ–±—ã—Ç–∏—è",
//     "–ó–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ",
//     "–ü—Ä–∞–≤–∞ —á–µ–ª–æ–≤–µ–∫–∞",
//     "–ü–æ–º–æ—â—å –ª–∏—Ü–∞–º —Å –û–í–ó",
//     "–°—Ç–∞—Ä—à–µ–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ",
//     "–ö—É–ª—å—Ç—É—Ä–∞ –∏ –∏—Å–∫—É—Å—Å—Ç–≤–æ",
//     "–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –ø–æ–º–æ—â—å",
//     "–ù–∞—É–∫–∞",
//     "–ù–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ",
//     "–î—Ä—É–≥–æ–µ"
// ];

// const filePath = path.join(__dirname, '/adminside/src/pages/events/list.ts');

// fs.readFile(filePath, 'utf8', (err, data) => {
//     if (err) {
//         console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞:', err);
//         return;
//     }

//     try {
//         // –†–∞–∑–¥–µ–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –Ω–∞ —á–∞—Å—Ç–∏ –¥–æ –∏ –ø–æ—Å–ª–µ –º–∞—Å—Å–∏–≤–∞ events
//         const prefix = data.split('export const events =')[0];
//         let eventsContent = data.split('export const events =')[1];
//         const suffix = eventsContent.split('];').slice(1).join('];');
//         eventsContent = eventsContent.split('];')[0] + ']';

//         // –î–æ–±–∞–≤–ª—è–µ–º course –∫ –∫–∞–∂–¥–æ–º—É –æ–±—ä–µ–∫—Ç—É –≤ –º–∞—Å—Å–∏–≤–µ
//         const updatedEventsContent = eventsContent.replace(
//             /\}\s*,?\s*(?=\{|$)/g,
//             (match) => {
//                 const randomCourse = COURSES[Math.floor(Math.random() * COURSES.length)];
//                 return `,\n    course: "${randomCourse}"\n}${match.includes(',') ? ',' : ''}`;
//             }
//         );

//         // –°–æ–±–∏—Ä–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
//         const updatedContent = `${prefix}export const events = ${updatedEventsContent}${suffix}`;

//         // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
//         fs.writeFile(filePath, updatedContent, 'utf8', (err) => {
//             if (err) {
//                 console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞:', err);
//                 return;
//             }
//             console.log('‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω. –ü–æ–ª–µ course –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫–æ –≤—Å–µ–º –∑–∞–ø–∏—Å—è–º.');
//         });

//     } catch (error) {
//         console.error('üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error.message);
//     }
// });